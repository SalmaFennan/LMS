trigger:
- main

variables:
  dockerRegistryServiceConnection: 'LmsDR'
  kubernetesServiceConnection: 'LmsKubernetes'  # <- nom exact de ta connexion
  imageRepositoryBackend: 'backend'
  imageRepositoryFrontend: 'frontend'
  containerRegistry: 'mylmsacr.azurecr.io'
  tag: '$(Build.BuildId)'
  trivyVersion: '0.49.1'

stages:
- stage: Build
  displayName: Build and Scan stage
  jobs:
  - job: BuildAndScan
    displayName: Build and Scan
    pool:
      name: Default
      demands:
        - agent.name -equals agent-sensipro
    steps:
    # Build and push backend image
    - task: Docker@2
      displayName: Build and push backend image
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryBackend)
        dockerfile: '$(Build.SourcesDirectory)/backend/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Build and push frontend image
    - task: Docker@2
      displayName: Build and push frontend image
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryFrontend)
        dockerfile: '$(Build.SourcesDirectory)/frontend/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Install Trivy on Windows agent
    - task: PowerShell@2
      displayName: Install Trivy
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Windows-64bit.zip" -OutFile "trivy.zip"
          Expand-Archive -Path "trivy.zip" -DestinationPath ".\trivy"
          Move-Item -Path ".\trivy\trivy.exe" -Destination "C:\trivy.exe"
          Write-Host "Trivy installed at C:\trivy.exe"
          C:\trivy.exe --version

    # Scan backend image
    - task: PowerShell@2
      displayName: Run Trivy scan on backend image
      inputs:
        targetType: 'inline'
        script: |
          C:\trivy.exe image --severity HIGH,CRITICAL --format template --template "@contrib/junit.tpl" `
            -o "$(Build.ArtifactStagingDirectory)\junit-report-backend.xml" `
            --exit-code 1 --ignore-unfixed $(containerRegistry)/$(imageRepositoryBackend):$(tag)
      continueOnError: true

    # Scan frontend image
    - task: PowerShell@2
      displayName: Run Trivy scan on frontend image
      inputs:
        targetType: 'inline'
        script: |
          C:\trivy.exe image --severity HIGH,CRITICAL --format template --template "@contrib/junit.tpl" `
            -o "$(Build.ArtifactStagingDirectory)\junit-report-frontend.xml" `
            --exit-code 1 --ignore-unfixed $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
      continueOnError: true

    # Publish Trivy scan results
    - task: PublishTestResults@2
      displayName: Publish Trivy scan results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)\junit-report-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Trivy Vulnerability Scan'
      condition: always()

    # Publish manifests as pipeline artifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
      demands:
        - agent.name -equals agent-sensipro
    environment: 'myapp'
    strategy:
      runOnce:
        deploy:
          steps:
          # Create imagePullSecret using kubernetesServiceConnection
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: 'acr-secret'
              secretType: 'dockerRegistry'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: 'default'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpoint: '$(dockerRegistryServiceConnection)'
              azureContainerRegistry: '$(containerRegistry)'

          # Deploy manifests
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/backend-deployment.yml
                $(Pipeline.Workspace)/manifests/frontend-deployment.yml
              imagePullSecrets: |
                acr-secret
              containers: |
                $(containerRegistry)/$(imageRepositoryBackend):$(tag)
                $(containerRegistry)/$(imageRepositoryFrontend):$(tag)
